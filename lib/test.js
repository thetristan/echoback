// Generated by CoffeeScript 1.6.2
(function() {
  var echoback, equal, expect;

  echoback = require('..');

  equal = (expect = require('assert')).equal;

  process.env.NODE_ENV = 'test';

  beforeEach(function(done) {
    return this.server = echoback('Test Server', 3060, done);
  });

  afterEach(function(done) {
    return this.server.close(done);
  });

  xdescribe('module init', function() {});

  xdescribe('#handler', function() {});

  describe('#requestToJSON', function() {
    beforeEach(function() {
      var fakeReq;

      fakeReq = {
        path: '/foo',
        query: {
          foo: 'bar'
        },
        cookies: {
          baz: 'qux'
        },
        headers: {
          'x-foo': 'bar'
        }
      };
      this.result = this.server.echoback.requestToJSON(fakeReq);
      return this.result = JSON.parse(this.result);
    });
    it('returns server name', function() {
      return equal(this.result.server, 'Test Server');
    });
    it('returns port number', function() {
      return equal(this.result.port, 3060);
    });
    it('returns query string args', function() {
      return equal(this.result.query.foo, 'bar');
    });
    it('returns cookies args', function() {
      return equal(this.result.cookies.baz, 'qux');
    });
    return it('returns header args', function() {
      return equal(this.result.headers['x-foo'], 'bar');
    });
  });

  describe('#requestToHTML', function() {
    beforeEach(function() {
      var fakeReq, result;

      fakeReq = {
        path: '/foo',
        query: {
          foo: 'bar'
        },
        cookies: {
          baz: 'qux'
        },
        headers: {
          'x-foo': 'bar'
        }
      };
      result = this.server.echoback.requestToHTML(fakeReq);
      return this.has = function(substr) {
        return result.indexOf(substr) > -1;
      };
    });
    it('returns server name', function() {
      return expect(this.has('Test Server'));
    });
    it('returns port number', function() {
      return expect(this.has('3060'));
    });
    it('returns query string arguments', function() {
      return expect(this.has('foo: bar'));
    });
    it('returns cookie arguments', function() {
      return expect(this.has('baz: qux'));
    });
    return it('returns request headers', function() {
      return expect(this.has('x-foo: bar'));
    });
  });

  describe('#shouldSendJSON', function() {
    it('returns true for paths ending in json', function() {
      equal(this.server.echoback.shouldSendJSON('/index.json'), true);
      equal(this.server.echoback.shouldSendJSON('/foo/bar.json'), true);
      return equal(this.server.echoback.shouldSendJSON('/.json'), true);
    });
    return it('returns false otherwise', function() {
      equal(this.server.echoback.shouldSendJSON('/index.html'), false);
      equal(this.server.echoback.shouldSendJSON('/foo/bar'), false);
      return equal(this.server.echoback.shouldSendJSON('/'), false);
    });
  });

}).call(this);
